<dcScript Title="Functions">
<Main Steps="3">
	<!--
		Scripts may declare functions, see ValidateToyList after Main.  Scripts may also		
		use CallFunction to call into a function.  Following the validate logic is
		placed in a function that then returns the FailCount via ResultName.  To pass
		the toy list to the function we first need to be sure we have a list (empty below)
		using the NewList operation.
	
		Output will be:
		
		>>>>> 0% <<<<<
		##### Step 1 of 3: Validate our folder's toy List #####
		>>>>> 10% <<<<<
		***** Get the folder out *****
		>>>>> 30% <<<<<
		***** Check for empty toy list *****
		2014-10-11T14:52:43.437Z Error Missing toy list
	-->
	<Progress Step="1" Name="Validate our folder's toy List" Amount="0" />

	<Progress Add="10">Get the folder out</Progress>
	
	<Var Name="folder" Type="Record">
		<NewList Name="ToyList" />
	</With>
	
	<CallFunction Name="ValidateToyList" Argument="$folder.ToyList" ResultName="FailCount" />
	
	<!--
		Output will be:
		
		>>>>> 60% <<<<<
		***** If there were validation failures then print message *****
	-->
	<Progress Add="30">If there were validation failures then print message</Progress>
	
	<If Target="$FailCount" GreaterThan="0">
		<Console>The toy list is invalid, it contains {$FailCount} policy violations.</Console>
	</If>
	
	<!--
		Building the list, below, has not changed from the previous example.
		
		Output will be:
		
		>>>>> 0% <<<<<
		##### Step 2 of 3: Create a random toy List from the wish list #####
		>>>>> 10% <<<<<
		***** Clear/initialize our toy list *****
		>>>>> 20% <<<<<
		***** Load the wish list *****
	-->
	<Progress Step="2" Name="Create a random toy List from the wish list" Amount="0" />
	
	<Progress Amount="10">Clear/initialize our toy list</Progress>
	
	<With Target="$folder">
		<NewList Name="ToyList" />
	</With>
	
	<Progress Add="10">Load the wish list</Progress>
	
	<Var Name="wishlist" Type="List">
		<AddItem Value="Legos" />
 		<AddItem Value="Puzzle" />
 		<AddItem Value="Kite" />
 		<AddItem Value="Cap Gun" />
 		<AddItem Value="Playdough" />
 		<AddItem Value="Bike" />
 		<AddItem Value="Softball" />
 		<AddItem Value="Softball Bat" />
 		<AddItem Value="Jump Rope" />
 		<AddItem Value="BB Gun" />
 		<AddItem Value="Softball Glove" />
 		<AddItem Value="Frisbee" />
	</Var>
	
	<!--
		Output will be:
		
		>>>>> 30% <<<<<
		***** Create the toy (gift) list from 5 random choices *****
		>>>>> 40% <<<<<
		***** Adding Jump Rope *****
		>>>>> 50% <<<<<
		***** Adding Cap Gun *****
		>>>>> 60% <<<<<
		***** Adding BB Gun *****
		>>>>> 70% <<<<<
		***** Adding Softball Bat *****
		>>>>> 80% <<<<<
		***** Adding Frisbee *****
		>>>>> 90% <<<<<
		***** Our toy (gift) list now has 5 items. *****
	-->
	<Progress Add="10">Create the toy (gift) list from 5 random choices</Progress>
	
	<For From="1" To="5">
		<Var Name="choice" Type="Integer">
			<Random From="1" To="$wishlist.Length" />
			<Dec />
		</Var>
		
		<Var Name="toy" SetTo="$wishlist.{$choice}" />

		<Progress Add="10">Adding {$toy}</Progress>
		
		<With Target="$folder.ToyList">
			<AddItem Value="$toy" />
		</With>
	</For>
	
	<Progress Add="10">Our toy (gift) list now has {$folder.ToyList.Length} items.</Progress>
	
	<!--
		Here we call ValidateToyList again, reusing the function.
		
		Output will be:
		
		>>>>> 0% <<<<<
		##### Step 3 of 3: Validate our folder's toy List again #####
		>>>>> 20% <<<<<
		***** Check for empty toy list *****
		>>>>> 50% <<<<<
		***** Check each toy on the list, we don't allow guns *****
		 - Found a Softball Bat!
		 - Found a Playdough!
		 - Found a BB Gun!
		2014-10-11T15:07:02.032Z Error Toy not allowed: BB Gun
		 - Found a Bike!
		 - Found a Cap Gun!
		2014-10-11T15:07:02.035Z Error Toy not allowed: Cap Gun
		>>>>> 80% <<<<<
		***** If there were validation failures then print message *****
		The toy list is invalid, it contains 2 policy violations.
	-->
	<Progress Step="3" Name="Validate our folder's toy List again" Amount="0" />
	
	<CallFunction Name="ValidateToyList" Argument="$folder.ToyList" ResultName="FailCount" />
	
	<Progress Add="30">If there were validation failures then print message</Progress>
	
	<If Target="$FailCount" GreaterThan="0">
		<Console>The toy list is invalid, it contains {$FailCount} policy violations.</Console>
	</If>
</Main>
<Function Name="ValidateToyList" Parameter="toylist">
	<Var Name="FailCount" Type="Integer" SetTo="0" />
	
	<Progress Add="20">Check for empty toy list</Progress>
	
	<IfEmpty Target="$toylist">
		<Error Code="90000" />
	</IfEmpty>
	
	<!-- 
		Return if error (above) and reset the error flag.  
		FailCount is our was of indicating a problem with the
		contents. By reseting the flag the calling function
		does not know there are errors.  Reseting the flag
		is the default behavor when using Return.
	-->
	<ReturnIfErrored Target="$FailCount" ResetFlag="true" />
	
	<Progress Add="30">Check each toy on the list, we don't allow guns</Progress>
	
	<ForEach Name="toy" In="$toylist">
		<Console> - Found a {$toy}!</Console>
		
		<If Target="$toy" EndsWith="Gun">
			<With Target="$FailCount">
				<Inc />
			</With>
			
			<Error Code="90001">
				<Param Value="$toy" />
			</Error>
		</If>
	</ForEach>
	
	<!-- 
		Return failure count and reset the error flag.  
	-->
	<Return Target="$FailCount" />
</Function>
</dcScript>